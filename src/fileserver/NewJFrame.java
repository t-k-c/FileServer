/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fileserver;

import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpServer;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;

/**
 *
 * @author codename-tkc
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jLabel1.setText("                                                  #tkctehnologies");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 773, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 497, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
                startServer();
                startServer2();
            }
        });
    }
    static void print(String messgae){
        System.out.print(messgae);
    }
        static void println(String messgae){
        System.out.println(messgae);
    }
        static String resps="0";
private static void startServer(){
    new Thread(() -> {
        try {
            ServerSocket socketServer= new ServerSocket(1998);
            while(true){
                java.net.Socket actualSocket = socketServer.accept();
                try(InputStream is = actualSocket.getInputStream()){
                    BufferedReader br=  new BufferedReader(new InputStreamReader(is));
                    String resp="";
                    while(br.ready() ||resp==""){
                       resp+=br.readLine();
                    }
                    println("tkc client at angle : "+resp +" port 1998");
                    resps=String.valueOf((Integer.parseInt(resp)*-1)+90);
                    br.close();
                }
                actualSocket.close();
            }
        } catch (IOException ex) {
            print(ex.getMessage());
        }
    }).start();

}
    private static void startServer2(){
      try{  HttpServer httpServer=  HttpServer.create(new InetSocketAddress(2000),0);
        httpServer.createContext("/", new myHttpHandler());
        httpServer.start();}           
      catch(IOException e ){
               e.printStackTrace();
           }
      
    }
    private static class myHttpHandler implements HttpHandler{

        @Override
        public void handle(HttpExchange he)  {
           try{ String uri = he.getRequestURI().toString();
            OutputStream os = he.getResponseBody();
            if(uri.equals("/")){
                File file = new File("C:\\Users\\codename-tkc\\WebstormProjects\\testForAcc\\index.html");
                he.sendResponseHeaders(200, file.length());
                he.getResponseHeaders().add("Content-Type", "text/html");
                Files.copy(file.toPath(), os);                
            }
            else{
                he.sendResponseHeaders(200, resps.length());
                he.getResponseHeaders().add("Content-Type", "text/html");
                os.write(resps.getBytes());
            }
            os.close();}
           catch(IOException e ){
               e.printStackTrace();
           }
        }
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
